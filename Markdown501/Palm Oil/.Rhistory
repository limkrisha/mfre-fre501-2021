{
string<- paste(url
,"max=",maxrec,"&" #maximum no. of records returned
,"type=",type,"&" #type of trade (c=commodities)
,"freq=",freq,"&" #frequency
,"px=",px,"&" #classification
,"ps=",ps,"&" #time period
,"r=",r,"&" #reporting area
,"p=",p,"&" #partner country
,"rg=",rg,"&" #trade flow
,"cc=",cc,"&" #classification code
,"fmt=",fmt        #Format
,sep = ""
)
if(fmt == "csv") {
raw.data<- read.csv(string,header=TRUE)
return(list(validation=NULL, data=raw.data))
} else {
if(fmt == "json" ) {
raw.data<- fromJSON(file=string)
data<- raw.data$dataset
validation<- unlist(raw.data$validation, recursive=TRUE)
ndata<- NULL
if(length(data)> 0) {
var.names<- names(data[[1]])
data<- as.data.frame(t( sapply(data,rbind)))
ndata<- NULL
for(i in 1:ncol(data)){
data[sapply(data[,i],is.null),i]<- NA
ndata<- cbind(ndata, unlist(data[,i]))
}
ndata<- as.data.frame(ndata)
colnames(ndata)<- var.names
}
return(list(validation=validation,data =ndata))
}
}
}
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110", fmt = "csv")
View(A)
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
View(A)
# This code assumes you have installed {pacman}
pacman::p_load(here, rjson, dplyr, ggplot2, gridExtra)
source(here("Code", "ComTrade_Function.R"))
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
dfA <- as.data.frame(A$data)
A_final <- dfA %>%
mutate(Weight.A = as.numeric(dfA$TradeQuantity)/1000,
Unit.A = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.A, Weight.A) %>%
rename(Imp.A = rtTitle,
Exp.A = ptTitle,
Comm.A = cmdCode,
Year.A = yr,
Type.A = rgDesc) %>%
arrange(Weight.A)
A_final
options(scipen = 999999)
# This code assumes you have installed {pacman}
pacman::p_load(here, rjson, dplyr, ggplot2, gridExtra)
source(here("Code", "ComTrade_Function.R"))
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
dfA <- as.data.frame(A$data)
A_final <- dfA %>%
mutate(Weight.A = as.numeric(dfA$TradeQuantity)/1000,
Unit.A = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.A, Weight.A) %>%
rename(Imp.A = rtTitle,
Exp.A = ptTitle,
Comm.A = cmdCode,
Year.A = yr,
Type.A = rgDesc) %>%
arrange(Weight.A)
A_final
options(scipen = 999999)
options(scipen = 0)
A_final <- A_final %>%
mutate(share = Weight.A / Weight.A[n()])
A_final
B <- get.Comtrade(r="528", p="0", ps="2020",
rg="1,2", cc="151110, 151190, 3826")
dfB <- as.data.frame(B$data)
Imp.B <- dfB$rtTitle
Exp.B <- dfB$ptTitle
Comm.B <- dfB$cmdCode
Year.B <- dfB$yr
Type.B <- dfB$rgDesc
Unit.B <- "tonnes"
Weight.B <- as.numeric(dfB$TradeQuantity)/1000
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(Weight.B),
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum[2,c(3)]
dfBsum[2,c("Comm.B")]
import_tot <- dfBsum[1,c("Weight.B")] + dfBsum[3,c("Weight.B")] + dfBsum[5,c("Weight.B")]
export_tot <- dfBsum[2,c("Weight.B")] + dfBsum[4,c("Weight.B")] + dfBsum[6,c("Weight.B")]
import_tot
export_tot
domestic <- import_tot - export_tot
domestic
graphics.off() # close all plots
data <- read.csv(here("Data", "palm_data.csv"), header=TRUE, sep=",", stringsAsFactors = FALSE)
data$date <- seq(as.Date("2012/1/1"), by = "month", length.out = 114)
head(data)
plot_rotterdam <- ggplot(data, aes(x = date, y = rotterdam)) +
geom_line() +ggtitle("Rotterdam Price")+labs(y= "CPO: US$/tonne")+ theme(plot.title = element_text(size=10))
plot_malaysia <- ggplot(data, aes(x = date, y = malaysia)) +
geom_line() +ggtitle("Malaysian Price")+labs(y= "CPO: RM/tonne")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_rotterdam, plot_malaysia, ncol = 2)
data <- mutate(data, priceRatio2 = malaysia/rotterdam)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +ggtitle("Malay-Rotterdam Price Ratio")+labs(y= "Ratio")+ theme(plot.title = element_text(size=10))
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +ggtitle("Malay-U.S. Exchange")+labs(y= "RM per One US$")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +ggtitle("Malay-Rotterdam Price Ratio")+labs(y= "Ratio")+ theme(plot.title = element_text(size=10))
data <- mutate(data, priceRatio2 = malaysia/rotterdam)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +ggtitle("Malay-Rotterdam Price Ratio")+labs(y= "Ratio")+ theme(plot.title = element_text(size=10))
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +ggtitle("Malay-U.S. Exchange")+labs(y= "RM per One US$")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +ggtitle("Malay-U.S. Exchange")+labs(y= "RM per One US$")+ theme(plot.title = element_text(size=10))
plot_PriceRatio
data <- mutate(data, priceRatio = malaysia/rotterdam)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +ggtitle("Malay-Rotterdam Price Ratio")+labs(y= "Ratio")+ theme(plot.title = element_text(size=10))
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +ggtitle("Malay-U.S. Exchange")+labs(y= "RM per One US$")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
data <- mutate(data, spread = rotterdam - (malaysia/exchange))
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +ggtitle("Rotterdam - Malaysian Price Spread")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$spread), color="blue")
plot_Spread
plot_Corn <- ggplot(data, aes(x = date, y = cornShip)) +
geom_line() +ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
lmCorn <- lm(data$spread~data$cornShip, data = data)
summary(lmCorn)
###
save(A, B, file = "comtradedata.RData")
###
save(A, B, file = here("Data", "comtradedata.RData"))
View(data)
data <- read.csv(here("Data", "palm_data.csv"), header=TRUE, sep=",", stringsAsFactors = FALSE)
View(data)
data$date <- seq(as.Date("2012/1/1"), by = "month", length.out = 114)
View(data)
data$date <- seq(as.Date("2012/1/1"), by = "month", length.out = 114)
data <- mutate(data, spread = rotterdam - (malaysia/exchange))
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +ggtitle("Rotterdam - Malaysian Price Spread")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$spread), color="blue")
plot_Spread
summary(data$spread)
data <- mutate(data, spread2 = (malaysia/exchange) - rotterdam)
summary(data$spread2)
load(here("Data", "comtradedata.RData"))
load(here("Data", "comtradedata.RData"))
dfA <- as.data.frame(A$data)
head(dfA)
library(rjson)
string <- "http://comtrade.un.org/data/cache/partnerAreas.json"
reporters <- fromJSON(file=string)
reporters <- as.data.frame(t(sapply(reporters$results,rbind)))
View(reporters)
View(dfA)
View(reporters)
View(reporters)
# Load packages. This code assumes you have installed {pacman}
pacman::p_load(here, rjson, dplyr, ggplot2, gridExtra)
# Loads the ComTrade_Function.R script. This code assumes that the function is saved in the "Data" folder.
source(here("Code", "ComTrade_Function.R"))
# Create object A based on the defined parameters and converts the list object to a df
# r = 528 (NetherlandS)
# p = 0 (World), 170 (Colombia), 320 (Guatemala), 360 (Indonesia), 458 (Malaysia)
# ps = year 2020
# rg = 1 (import)
# cc = 151110 (crude palm oil)
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
dfA <- as.data.frame(A$data)
# Clean up dfA and call it A_final
A_final <- dfA %>%
mutate(Weight.A = as.numeric(dfA$TradeQuantity)/1000,
Unit.A = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.A, Weight.A) %>%
rename(Imp.A = rtTitle,
Exp.A = ptTitle,
Comm.A = cmdCode,
Year.A = yr,
Type.A = rgDesc) %>%
arrange(Weight.A)
A_final
# Import Shares
A_final <- A_final %>%
mutate(share = Weight.A / Weight.A[n()])
B <- get.Comtrade(r="528", p="0", ps="2020",
rg="1,2", cc="151110, 151190, 3826")
dfB <- as.data.frame(B$data)
Imp.B <- dfB$rtTitle
Exp.B <- dfB$ptTitle
Comm.B <- dfB$cmdCode
Year.B <- dfB$yr
Type.B <- dfB$rgDesc
B <- get.Comtrade(r="528", p="0", ps="2020",
rg="1,2", cc="151110, 151190, 3826")
dfB <- as.data.frame(B$data)
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(Weight.B),
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum
dfB <- as.data.frame(B$data)
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(Weight.B),
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(TradeQuantity),
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(TradeQuantity)/1000,
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum
B <- get.Comtrade(r="528", p="0", ps="2020",
rg="1,2", cc="151110, 151190, 3826")
dfB <- as.data.frame(B$data)
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(TradeQuantity)/1000,
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum
# Exercise 2
dfBsum[2,c(3)]
dfBsum[2,c("Comm.B")]
# Exercise 2 Solution: Calculate weight of domestic consumption
import_tot <- dfBsum[1,c("Weight.B")] + dfBsum[3,c("Weight.B")] + dfBsum[5,c("Weight.B")]
export_tot <- dfBsum[2,c("Weight.B")] + dfBsum[4,c("Weight.B")] + dfBsum[6,c("Weight.B")]
import_tot
export_tot
domestic <- import_tot - export_tot
domestic
# Local Versus U.S. Dollars
graphics.off() # close all plots
data <- read.csv(here("Data", "palm_data.csv"), header=TRUE, sep=",", stringsAsFactors = FALSE)
data$date <- seq(as.Date("2012/1/1"), by = "month", length.out = 114)
head(data)
# Plot the two price series side by side
plot_rotterdam <- ggplot(data, aes(x = date, y = rotterdam)) +
geom_line() +ggtitle("Rotterdam Price")+labs(y= "CPO: US$/tonne")+ theme(plot.title = element_text(size=10))
plot_malaysia <- ggplot(data, aes(x = date, y = malaysia)) +
geom_line() +ggtitle("Malaysian Price")+labs(y= "CPO: RM/tonne")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_rotterdam, plot_malaysia, ncol = 2)
# Isolating Exchange Rates Impacts
data <- mutate(data, priceRatio = malaysia/rotterdam)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +ggtitle("Malay-Rotterdam Price Ratio")+labs(y= "Ratio")+ theme(plot.title = element_text(size=10))
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +ggtitle("Malay-U.S. Exchange")+labs(y= "RM per One US$")+ theme(plot.title = element_text(size=10))
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
# Analysis of Price Spread
data <- mutate(data, spread = rotterdam - (malaysia/exchange))
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +ggtitle("Rotterdam - Malaysian Price Spread")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$spread), color="blue")
# Analysis of Transportation Costs
plot_Corn <- ggplot(data, aes(x = date, y = cornShip)) +
geom_line() +ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
# Regression of Spread on Corn Transport Cost
lmCorn <- lm(data$spread~data$cornShip, data = data)
summary(lmCorn)
plot_Spread
save(data, file = here("Data", "palm_data_optional_exercise.RData"))
View(data)
mean_spread <- mean(data$spread)
mean_spread <- mean(data$spread)
mean_cornShip <- mean(data$cornShip)
data$adjust <- mean_spread - mean_cornShip
View(data)
data %>% mutate(adjust2 = mean(spread) - mean(cornShip))
# Optional R Exercise
data <- data %>% mutate(adjust = mean(spread) - mean(cornShip),
cornship_adjust = cornShip + adjust)
38.9248038 + 27.09211
51.75 + 27.09211
plot_Corn <- ggplot(data, aes(x = date, y = cornShip)) +
geom_line() +ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
# Plots
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +ggtitle("Rotterdam - Malaysian Price Spread")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$spread), color="blue")
plot_Corn <- ggplot(data, aes(x = date, y = cornShip)) +
geom_line() +ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne")+ theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
plot_Corn + geom_line(y = cornship_adjust)
plot_Corn <- ggplot() +
geom_line(data, aes(x = date, y = cornShip), color = 'blue') +
geom_line(data, aes(x = date, y = cornShip_adjust), color = 'red') +
ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne") +
theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
ggplot() +
geom_line(data, aes(x = date, y = cornShip), color = 'blue') +
geom_line(data, aes(x = date, y = cornShip_adjust), color = 'red')
ggplot() +
geom_line(data, aes(x = date, y = cornShip), color = 'blue')
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne") +
theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne") +
theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
plot_Corn
# Optional R Exercise
data <- data %>% mutate(adjust = mean(spread) - mean(cornShip),
cornShip_adjust = cornShip + adjust)
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
ggtitle("U.S. to Japan Corn Rate")+labs(y= "US$/tonne") +
theme(plot.title = element_text(size=10))+geom_hline(yintercept = mean(data$cornShip), color="blue")
plot_Corn
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
labs(title = "U.S. to Japan Corn Rate", y = "US$/tonne") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
labs(title = "U.S. to Japan Corn Rate", y = "US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
grid.arrange(plot_rotterdam, plot_malaysia, ncol = 2)
# Load packages. This code assumes you have installed {pacman}
pacman::p_load(here, rjson, dplyr, ggplot2, gridExtra)
# Load data from the case study
load(here("Data", "palm_data_optional_exercise"))
# Load data from the case study
load(here("Data", "palm_data_optional_exercise.RData"))
# Optional R Exercise
data <- data %>% mutate(adjust = mean(spread) - mean(cornShip),
cornShip_adjust = cornShip + adjust)
# Plots
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +
labs(title = "Rotterdam - Malaysian Price Spread", y= "US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$spread), color="blue")
plot_Corn <- ggplot(data, aes(x = date)) +
geom_line(aes(y = cornShip), color = "blue") +
geom_line(aes(y = cornShip_adjust), color = "red") +
labs(title = "U.S. to Japan Corn Rate", y = "US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
# The codes in this script are equivalent to those in the Palm_Oil document file starting from `Running the code` section. Please refer to the lecture notes for details on the code
# Load packages. This code assumes you have installed {pacman}
pacman::p_load(here, rjson, dplyr, ggplot2, gridExtra)
# If the get.Comtrade() function won't work, the following code will import in the list objects A and B based from the case study
# load(here("Data", "comtradedata.RData"))
# Loads the ComTrade_Function.R script. This code assumes that the function is saved in the "Data" folder.
source(here("Code", "ComTrade_Function.R"))
# Create object A based on the defined parameters and converts the list object to a df
# r = 528 (NetherlandS)
# p = 0 (World), 170 (Colombia), 320 (Guatemala), 360 (Indonesia), 458 (Malaysia)
# ps = year 2020
# rg = 1 (import)
# cc = 151110 (crude palm oil)
A <- get.Comtrade(r="528", p="0, 170, 320, 360, 458", ps="2020",
rg=1, cc="151110")
dfA <- as.data.frame(A$data)
# Clean up dfA and call it A_final
A_final <- dfA %>%
mutate(Weight.A = as.numeric(dfA$TradeQuantity)/1000,
Unit.A = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.A, Weight.A) %>%
rename(Imp.A = rtTitle,
Exp.A = ptTitle,
Comm.A = cmdCode,
Year.A = yr,
Type.A = rgDesc) %>%
arrange(Weight.A)
A_final
# Import Shares
A_final <- A_final %>%
mutate(share = Weight.A / Weight.A[n()])
# Code for Imports and Exports
# Create object B based on the defined parameters
# r = 528 (Netherlands)
# p = 0 (World)
# ps = year 2020
# rg = 1 (imports), 2 (exports)
# cc = 151110 (crude palm oil), refined palm oil (151190), biodiesel (3826)
B <- get.Comtrade(r="528", p="0", ps="2020",
rg="1,2", cc="151110, 151190, 3826")
dfB <- as.data.frame(B$data)
dfBsum <- dfB %>%
mutate(Weight.B = as.numeric(TradeQuantity)/1000,
Unit.B = "tonnes") %>%
select(rtTitle, ptTitle, cmdCode, yr, rgDesc, Unit.B, Weight.B) %>%
rename(Imp.B = rtTitle,
Exp.B = ptTitle,
Comm.B = cmdCode,
Year.B = yr,
Type.B = rgDesc)
dfBsum
# Exercise 2
dfBsum[2,c(3)]
dfBsum[2,c("Comm.B")]
# Exercise 2 Solution: Calculate weight of domestic consumption
import_tot <- dfBsum[1,c("Weight.B")] + dfBsum[3,c("Weight.B")] + dfBsum[5,c("Weight.B")]
export_tot <- dfBsum[2,c("Weight.B")] + dfBsum[4,c("Weight.B")] + dfBsum[6,c("Weight.B")]
import_tot
export_tot
domestic <- import_tot - export_tot
domestic
# Local Versus U.S. Dollars
graphics.off() # close all plots
data <- read.csv(here("Data", "palm_data.csv"), header=TRUE, sep=",", stringsAsFactors = FALSE)
data$date <- seq(as.Date("2012/1/1"), by = "month", length.out = 114)
head(data)
# Plot the two price series side by side
plot_rotterdam <- ggplot(data, aes(x = date, y = rotterdam)) +
geom_line() +
labs(title = "Rotterdam Price", y= "CPO: US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10))
plot_malaysia <- ggplot(data, aes(x = date, y = malaysia)) +
geom_line() +
labs(title = "Malaysian Price", y = "CPO: RM/tonne", x = "Date") +
theme(plot.title = element_text(size=10))
grid.arrange(plot_rotterdam, plot_malaysia, ncol = 2)
# Isolating Exchange Rates Impacts
data <- mutate(data, priceRatio = malaysia/rotterdam)
plot_PriceRatio <- ggplot(data, aes(x = date, y = priceRatio)) +
geom_line() +
labs(title ="Malay-Rotterdam Price Ratio", y= "Ratio", x = "Date")+ theme(plot.title = element_text(size=10))
plot_Exchange <- ggplot(data, aes(x = date, y = exchange)) +
geom_line() +
labs(title = "Malay-U.S. Exchange", y= "RM per One US$", x = "Date") +
theme(plot.title = element_text(size=10))
grid.arrange(plot_PriceRatio, plot_Exchange, ncol = 2)
# Analysis of Price Spread
data <- mutate(data, spread = rotterdam - (malaysia/exchange))
plot_Spread <- ggplot(data, aes(x = date, y = spread)) +
geom_line() +
labs(title = "Rotterdam - Malaysian Price Spread", y= "US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$spread), color="blue")
# Analysis of Transportation Costs
plot_Corn <- ggplot(data, aes(x = date, y = cornShip)) +
geom_line() +
labs(title = "U.S. to Japan Corn Rate", y= "US$/tonne", x = "Date") +
theme(plot.title = element_text(size=10)) +
geom_hline(yintercept = mean(data$cornShip), color="blue")
grid.arrange(plot_Spread, plot_Corn, ncol = 2)
# Regression of Spread on Corn Transport Cost
lmCorn <- lm(data$spread~data$cornShip, data = data)
summary(lmCorn)
plot_Spread
